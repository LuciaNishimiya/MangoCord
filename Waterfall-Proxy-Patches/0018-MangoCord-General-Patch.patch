From 25f0ce813e1f0dc75dda1fa9fc2dfba5da636f39 Mon Sep 17 00:00:00 2001
From: Juan Cruz Linsalata <LinsaFTW@users.noreply.github.com>
Date: Mon, 12 Oct 2020 15:40:53 -0300
Subject: [PATCH] MangoCord General Patch


diff --git a/mangocord/pom.xml b/mangocord/pom.xml
index 20edd900..fb80f233 100644
--- a/mangocord/pom.xml
+++ b/mangocord/pom.xml
@@ -5,13 +5,13 @@
     <parent>
         <groupId>io.github.waterfallmc</groupId>
         <artifactId>waterfall-parent</artifactId>
-        <version>1.19-R0.1-SNAPSHOT</version>
+        <version>1.20-R0.1-SNAPSHOT</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
 
     <groupId>dev.lucianishimiya</groupId>
     <artifactId>waterfall-mangocord</artifactId>
-    <version>1.19-R0.1-SNAPSHOT</version>
+    <version>1.20-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>Waterfall-MangoCord</name>
diff --git a/mangocord/src/main/java/dev/lucianishimiya/mangocord/MangoCord.java b/mangocord/src/main/java/dev/lucianishimiya/mangocord/MangoCord.java
new file mode 100644
index 00000000..f3d5c029
--- /dev/null
+++ b/mangocord/src/main/java/dev/lucianishimiya/mangocord/MangoCord.java
@@ -0,0 +1,31 @@
+package dev.lucianishimiya.mangocord;
+
+import java.util.Collection;
+import java.util.logging.Logger;
+
+import dev.lucianishimiya.mangocord.configuration.MangoCordConfiguration;
+import lombok.Getter;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.YamlConfiguration;
+
+public class MangoCord {
+    @Getter
+    private static MangoCord instance;
+
+    public static void initialize(final Logger logger, final Collection<String> whitelistedAddresses) {
+        if (MangoCord.instance == null) {
+            MangoCord.instance = new MangoCord();
+        }
+
+        instance.reload(logger, whitelistedAddresses);
+    }
+
+    @Getter
+    private MangoCordConfiguration mangoCordConfiguration;
+
+    public void reload(final Logger logger, final Collection<String> whitelistedAddresses) {
+        final ConfigurationProvider configurationProvider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+        
+        this.mangoCordConfiguration = new MangoCordConfiguration(configurationProvider, whitelistedAddresses);
+    }
+}
\ No newline at end of file
diff --git a/mangocord/src/main/java/dev/lucianishimiya/mangocord/configuration/MangoConfig.java b/mangocord/src/main/java/dev/lucianishimiya/mangocord/configuration/MangoConfig.java
new file mode 100644
index 00000000..e6c660d1
--- /dev/null
+++ b/mangocord/src/main/java/dev/lucianishimiya/mangocord/configuration/MangoConfig.java
@@ -0,0 +1,74 @@
+package dev.lucianishimiya.mangocord.configuration;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.YamlConfiguration;
+
+public class MangoConfig {
+    Configuration load(File file) {
+        ConfigurationProvider configurationProvider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+
+        if (file.exists() && file.isFile()) {
+            try {
+                return configurationProvider.load(file);
+            } catch (IOException ex) {
+                // Failed to load, do nothing
+            }
+        }
+
+        return new Configuration();
+    }
+
+    void save(Configuration config, File file) {
+        ConfigurationProvider configurationProvider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+
+        try {
+            configurationProvider.save(config, file);
+        } catch (IOException ex) {
+            // Failed to save, do nothing
+        }
+    }
+
+    double setIfUnexistant(final String arg1, final double arg2, final Configuration configuration) {
+        return (double) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    int setIfUnexistant(final String arg1, final int arg2, final Configuration configuration) {
+        return (int) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    String setIfUnexistant(final String arg1, final String arg2, final Configuration configuration) {
+        return (String) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    boolean setIfUnexistant(final String arg1, final boolean arg2, final Configuration configuration) {
+        return (boolean) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    Object setIfUnexistant(final String arg1, final Object arg2, final Configuration configuration) {
+        if (!configuration.contains(arg1)) {
+            configuration.set(arg1, arg2);
+
+            return arg2;
+        } else {
+            return configuration.get(arg1);
+        }
+    }
+
+    Collection<String> setIfUnexistant(final String arg1, final Collection<String> arg2,
+            final Configuration configuration) {
+        if (!configuration.contains(arg1)) {
+            configuration.set(arg1, new ArrayList<>(arg2));
+
+            return arg2;
+        } else {
+            return new HashSet<>(configuration.getStringList(arg1));
+        }
+    }
+}
diff --git a/mangocord/src/main/java/dev/lucianishimiya/mangocord/configuration/MangoCordConfiguration.java b/mangocord/src/main/java/dev/lucianishimiya/mangocord/configuration/MangoCordConfiguration.java
new file mode 100644
index 00000000..241e8ed9
--- /dev/null
+++ b/mangocord/src/main/java/dev/lucianishimiya/mangocord/configuration/MangoCordConfiguration.java
@@ -0,0 +1,20 @@
+package dev.lucianishimiya.mangocord.configuration;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+
+import lombok.Getter;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+
+public class MangoCordConfiguration extends MangoConfig {
+    public MangoCordConfiguration(final ConfigurationProvider configurationProvider, final Collection<String> whitelistedAddresses) {
+        final File configurationFile = new File("./mangocord.yml");
+        final Configuration configuration = load(configurationFile);
+
+        save(configuration, configurationFile);
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 640f0ea2..70a1192e 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -1,5 +1,6 @@
 package net.md_5.bungee.protocol;
 
+import dev.lucianishimiya.mangocord.MangoCord;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelHandlerContext;
diff --git a/proxy/src/main/java/dev/lucianishimiya/mangocord/commands/MangoCordCommand.java b/proxy/src/main/java/dev/lucianishimiya/mangocord/commands/MangoCordCommand.java
new file mode 100644
index 00000000..021b38d4
--- /dev/null
+++ b/proxy/src/main/java/dev/lucianishimiya/mangocord/commands/MangoCordCommand.java
@@ -0,0 +1,58 @@
+package dev.lucianishimiya.mangocord.commands;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+import dev.lucianishimiya.mangocord.MangoCord;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.plugin.Command;
+
+public class MangoCordCommand extends Command {
+private final BungeeCord bungeeCord;
+
+    public MangoCordCommand(final BungeeCord bungeeCord) {
+        super("mangocord");
+
+        this.bungeeCord = bungeeCord;
+    }
+
+    @Override
+    public void execute(final CommandSender sender, final String[] args) {
+        final MangoCord mangoCord = MangoCord.getInstance();
+
+        if (sender.hasPermission("mangocord.usage")) {
+            if (args.length > 0) {
+                final String arg0 = args[0];
+
+                switch (arg0) {
+                    case "reload": {
+                        // MangoCord - Collect ips from servers
+                        final Collection<String> whitelistedAddresses = new HashSet<>();
+
+                        for (final ServerInfo serverInfo : bungeeCord.getServers().values()) {
+                            whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
+                        }
+
+                        MangoCord.initialize(bungeeCord.getLogger(), whitelistedAddresses);
+                        sender.sendMessage(TextComponent
+                                .fromLegacyText("mangocord_reload"));
+                        break;
+                    }
+                    default: {
+                        sender.sendMessage(TextComponent.fromLegacyText("mangocord_help"));
+                        break;
+                    }
+                }
+            } else {
+                sender.sendMessage(TextComponent
+                        .fromLegacyText("mangocord_help"));
+            }
+        } else {
+            sender.sendMessage(TextComponent
+                    .fromLegacyText("mangocord_nopermission"));
+        }
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index f4333c6f..91eaa39c 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -9,6 +9,8 @@ import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+
+import dev.lucianishimiya.mangocord.MangoCord;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import io.github.waterfallmc.waterfall.event.ProxyExceptionEvent;
@@ -295,6 +297,15 @@ public class BungeeCord extends ProxyServer
         pluginManager.loadPlugins();
         config.load();
 
+        // MangoCord - Renew and register modules
+        final Collection<String> whitelistedAddresses = new HashSet<>();
+
+        for (final ServerInfo serverInfo : getServers().values()) {
+            whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
+        }
+
+        MangoCord.initialize(logger, whitelistedAddresses);
+
         if ( config.isForgeSupport() )
         {
             registerChannel( ForgeConstants.FML_TAG );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index cba1515b..900d0e4d 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -2,6 +2,8 @@ package net.md_5.bungee;
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
+
+import dev.lucianishimiya.mangocord.MangoCord;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import java.net.InetSocketAddress;
@@ -165,7 +167,9 @@ public class ServerConnector extends PacketHandler
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during server login process!\n" + BufUtil.dump( packet.buf, 16 ) );
+            // MangoCord - MangoCord General Patch
+            // More specific invalid packet exceptions
+            throw new QuietException( "Unexpected packet received during server connector process!\n" + BufUtil.dump(packet.buf, 16) );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 1c0827f1..b809e848 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -35,6 +35,7 @@ import net.md_5.bungee.api.SkinConfiguration;
 import net.md_5.bungee.api.Title;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.event.PermissionCheckEvent;
@@ -66,6 +67,7 @@ import net.md_5.bungee.tab.ServerUnique;
 import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
+import net.md_5.bungee.util.QuietException;
 
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
@@ -393,9 +395,11 @@ public final class UserConnection implements ProxiedPlayer
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout() )
                 .remoteAddress( target.getAddress() );
         // Windows is bugged, multi homed users will just have to live with random connecting IPs
-        if ( getPendingConnection().getListener().isSetLocalAddress() && !PlatformDependent.isWindows() && getPendingConnection().getListener().getSocketAddress() instanceof InetSocketAddress )
+        // MangoCord - Use listenerInfo
+        final ListenerInfo listenerInfo = getPendingConnection().getListener();
+        if ( listenerInfo.isSetLocalAddress() && !PlatformDependent.isWindows() && listenerInfo.getSocketAddress() instanceof InetSocketAddress )
         {
-            b.localAddress( getPendingConnection().getListener().getHost().getHostString(), 0 );
+            b.localAddress( listenerInfo.getHost().getHostString(), 0 );
         }
         b.connect().addListener( listener );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 32c57dad..ac004603 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -21,6 +21,8 @@ import java.util.logging.Level;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 
+import dev.lucianishimiya.mangocord.MangoCord;
+
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.BungeeCord;
@@ -159,7 +161,9 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
+            // MangoCord - MangoCord General Patch
+            // More specific invalid packet exceptions
+            throw new QuietException( "Unexpected packet received during initial handler process!\n" + BufUtil.dump(packet.buf, 16) );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
index a409d440..3503c089 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
@@ -1,6 +1,7 @@
 package net.md_5.bungee.connection;
 
 import com.google.gson.Gson;
+
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.BungeeCord;
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 4820267b..694ecdb0 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.netty;
 
 import com.google.common.base.Preconditions;
+
+import dev.lucianishimiya.mangocord.MangoCord;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.handler.codec.CorruptedFrameException;
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 9227db06..f9227e01 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.netty;
 
 import com.google.common.base.Preconditions;
+
+import dev.lucianishimiya.mangocord.MangoCord;
 import io.github.waterfallmc.waterfall.event.ConnectionInitEvent;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.Channel;
-- 
2.40.1.windows.1

